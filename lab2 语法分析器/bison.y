%{
  // 头文件引入区域（Prologue）
  #include <ctype.h>   // 提供 isdigit 等字符处理函数
  #include <stdio.h>   // 标准输入输出
  #include <math.h>    // 提供数学函数如 pow()
  
  // 声明外部函数（由词法分析器定义）和错误处理函数
  int yylex(void);     // 词法分析函数
  void yyerror(const char *s);  // 语法错误处理函数
%}

///////////////////////////////////////
// Bison声明区域（定义终结符和优先级）
///////////////////////////////////////

%token NUM  // 终结符：数字（由词法分析器识别并返回）

// 声明语法值使用 double 类型（用于存储计算结果）
%define api.value.type {double}

// 定义运算符优先级和结合性（从低到高）
// 左结合的加法和减法
%left '+' '-'  
// 左结合的乘法和除法
%left '*' '/'
// 右结合的取负运算（n 为负号操作）
%right 'n'
// 右结合的幂运算
%right '^'

%%
///////////////////////////
// 语法规则区域（Grammar）
///////////////////////////

input:
    %empty                // 空输入
  | input line            // 多行输入，递归定义
  ;

line:
    '\n'                  // 空行，忽略
  | exp '\n'              // 表达式后换行，输出结果
      { printf("%.10g\n", $1); }  // 打印结果（最多10位有效数字）
  ;

exp:
    NUM                   // 直接是数字，值为自身
      { $$ = $1; }

  | exp exp '+'           // 二元加法，弹出两个栈顶元素相加
      { $$ = $1 + $2; }

  | exp exp '-'           // 二元减法，前一个减后一个
      { $$ = $1 - $2; }

  | exp exp '*'           // 二元乘法
      { $$ = $1 * $2; }

  | exp exp '/'           // 二元除法
      { $$ = $1 / $2; }

  | exp exp '^'           // 幂运算：前一个为底数，后一个为指数
      { $$ = pow($1, $2); }

  | exp 'n'               // 一元负号（负数）：取负
      { $$ = -$1; }
  ;

%%
//////////////////////////////
// 用户代码区域（C函数实现）
//////////////////////////////

// 简单的词法分析器
int yylex(void)
{
  int c;

  // 跳过空格和制表符
  while ((c = getchar()) == ' ' || c == '\t')
    continue;

  // 如果是数字或小数点，读取完整的浮点数
  if (c == '.' || isdigit(c)) {
    ungetc(c, stdin);            // 把第一个数字或小数点放回输入流
    scanf("%lf", &yylval);       // 读取浮点数，存入 yylval
    return NUM;                  // 返回数字标记
  }

  // 输入结束（EOF或用户输入!）
  if (c == EOF || c == '!')
    return 0;

  // 返回其他字符（例如 + - * / ^ n）
  return c;
}

// 主函数，调用语法分析入口
int main(void)
{
  yyparse();   // 启动语法分析
  return 0;
}

// 错误处理函数：打印语法错误信息
void yyerror(const char *s)
{
  fprintf(stderr, "Error: %s\n", s);
}
